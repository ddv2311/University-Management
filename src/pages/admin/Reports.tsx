import React, { useState, useEffect } from 'react';
import { useAuth } from '../../context/AuthContext';

interface Report {
  _id: string;
  type: 'attendance' | 'marks' | 'event';
  title: string;
  data: {
    totalCount?: number;
    averageAttendance?: number;
    averageMarks?: number;
    participantCount?: number;
    details: Array<any>;
  };
  createdAt: string;
}

interface AlertProps {
  type: 'success' | 'error';
  message: string;
}

const Reports: React.FC = () => {
  const [reports, setReports] = useState<Report[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [alert, setAlert] = useState<AlertProps | null>(null);
  const [reportType, setReportType] = useState<'attendance' | 'marks' | 'event'>('event');
  const [dateRange, setDateRange] = useState({
    startDate: '',
    endDate: ''
  });
  const { user } = useAuth();

  const showAlert = (type: 'success' | 'error', message: string) => {
    setAlert({ type, message });
    setTimeout(() => setAlert(null), 3000);
  };

  const generateReport = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        throw new Error('No authentication token found');
      }

      if (!dateRange.startDate || !dateRange.endDate) {
        showAlert('error', 'Please select date range');
        return;
      }

      const response = await fetch(`http://localhost:5000/api/reports/generate/${reportType}`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(dateRange)
      });

      if (!response.ok) {
        const data = await response.json();
        throw new Error(data.message || 'Failed to generate report');
      }

      const newReport = await response.json();
      setReports(prev => [newReport, ...prev]);
      showAlert('success', 'Report generated successfully');
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Error generating report';
      showAlert('error', message);
    }
  };
  const downloadReport = async (report: Report) => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        throw new Error('No authentication token found');
      }
  
      // Format the report content with better structure and validation
      const formatDetails = (details: any[]) => {
        if (!details.length) return 'No data available';
        
        switch (report.type) {


          case 'event':
            return details.map(d =>
              `Event: ${d.eventName}
               Type: ${d.type}
               Date: ${new Date(d.date).toLocaleDateString()}
               Participants: ${d.participants.length}
               Names: ${d.participants.join(', ')}`
            ).join('\n\n');

          case 'attendance':
            return details.map(d => 
              `Student: ${d.studentName}
               Course: ${d.courseName}
               Present: ${d.present}
               Absent: ${d.absent}
               Total: ${d.total}
               Attendance: ${((d.present / d.total) * 100).toFixed(2)}%`
            ).join('\n\n');
          
          case 'marks':
            return details.map(d =>
              `Student: ${d.studentName}
               Course: ${d.courseName}
               Marks: ${d.marks.join(', ')}
               Average: ${d.average?.toFixed(2)}`
            ).join('\n\n');
          
          
          
          default:
            return JSON.stringify(details, null, 2);
        }
      };
  
      const reportContent = `
  ==========================================
  ${report.title.toUpperCase()}
  ==========================================
  Generated on: ${new Date(report.createdAt).toLocaleString()}
  Report Type: ${report.type.toUpperCase()}
  
  SUMMARY
  ------------------------------------------
  ${report.data.totalCount ? `Total Count: ${report.data.totalCount}` : ''}
  ${report.data.averageAttendance ? `Average Attendance: ${report.data.averageAttendance.toFixed(2)}%` : ''}
  ${report.data.averageMarks ? `Average Marks: ${report.data.averageMarks.toFixed(2)}` : ''}
  ${report.data.participantCount ? `Total Participants: ${report.data.participantCount}` : ''}
  
  DETAILED INFORMATION
  ------------------------------------------
  ${formatDetails(report.data.details)}
  
  ==========================================
  Generated by: ${user?.name || 'Admin'}
  Report ID: ${report._id}
  ==========================================`;
  
      // Create and download the file
      const blob = new Blob([reportContent], { type: 'text/plain;charset=utf-8' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${report.type}-report-${new Date().toISOString().split('T')[0]}.txt`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
      
      showAlert('success', 'Report downloaded successfully');
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Error downloading report';
      showAlert('error', message);
      console.error('Download error:', err);
    }
  };

  const deleteReport = async (reportId: string) => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        throw new Error('No authentication token found');
      }

      const response = await fetch(`http://localhost:5000/api/reports/${reportId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (!response.ok) {
        const data = await response.json();
        throw new Error(data.message || 'Failed to delete report');
      }

      setReports(prev => prev.filter(report => report._id !== reportId));
      showAlert('success', 'Report deleted successfully');
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Error deleting report';
      showAlert('error', message);
    }
  };

  useEffect(() => {
    const fetchReports = async () => {
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          throw new Error('No authentication token found');
        }
  
        const response = await fetch('http://localhost:5000/api/reports', {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
  
        if (response.status === 404) {
          throw new Error('Reports endpoint not found. Please check API configuration.');
        }
  
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
        }
  
        const data = await response.json();
        setReports(data);
      } catch (err) {
        const message = err instanceof Error ? err.message : 'Error fetching reports';
        setError(message);
        showAlert('error', message);
        console.error('Fetch error:', err);
      } finally {
        setLoading(false);
      }
    };
  
    fetchReports();
  }, []);

   

  if (!user?.role === 'admin') {
    return <div className="text-center mt-8">Access denied. Admin privileges required.</div>;
  }

  if (loading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900"></div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h2 className="text-2xl font-bold mb-6">Reports Management</h2>

      {alert && (
        <div className={`mb-4 p-4 rounded-md ${
          alert.type === 'success' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
        }`}>
          {alert.message}
        </div>
      )}

      {/* Generate Report Section */}
      <div className="mb-8 bg-white shadow rounded-lg p-6">
        <h3 className="text-lg font-medium mb-4">Generate New Report</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
          <select
            value={reportType}
            onChange={(e) => setReportType(e.target.value as 'event' | 'marks' | 'attendance')}
            className="rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
          >
            <option value="event">Event Participation Report</option>
            <option value="attendance">Attendance Report</option>
            <option value="marks">Marks Report</option>
            
          </select>

          <input
            type="date"
            value={dateRange.startDate}
            onChange={(e) => setDateRange(prev => ({ ...prev, startDate: e.target.value }))}
            className="rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            placeholder="Start Date"
          />

          <input
            type="date"
            value={dateRange.endDate}
            onChange={(e) => setDateRange(prev => ({ ...prev, endDate: e.target.value }))}
            className="rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            placeholder="End Date"
          />

          <button
            onClick={generateReport}
            className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            Generate Report
          </button>
        </div>
      </div>

      {/* Reports List */}
      <div className="bg-white shadow overflow-hidden sm:rounded-md">
        <ul className="divide-y divide-gray-200">
          {reports.map(report => (
            <li key={report._id} className="px-6 py-4">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-lg font-medium text-gray-900">{report.title}</h3>
                  <p className="text-sm text-gray-500">
                    Type: {report.type.charAt(0).toUpperCase() + report.type.slice(1)}
                  </p>
                  <p className="text-sm text-gray-500">
                    Generated: {new Date(report.createdAt).toLocaleDateString()}
                  </p>
                  {report.data && (
                    <div className="mt-2 text-sm text-gray-600">
                      {report.data.totalCount && <p>Total Count: {report.data.totalCount}</p>}
                      {report.data.averageAttendance && <p>Average Attendance: {report.data.averageAttendance}%</p>}
                      {report.data.averageMarks && <p>Average Marks: {report.data.averageMarks}</p>}
                      {report.data.participantCount && <p>Participants: {report.data.participantCount}</p>}
                    </div>
                  )}
                </div>
                <div className="flex gap-2">
                <button
             onClick={() => downloadReport(report)}
             className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                >
               Download
                </button>
                  <button
                    onClick={() => deleteReport(report._id)}
                    className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
                  >
                    Delete
                  </button>
                </div>
              </div>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default Reports;